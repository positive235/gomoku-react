{"version":3,"sources":["Game.js","index.js"],"names":["Game","props","stoneRadius","stoneDiameter","init","bind","addGo","history","state","blackStone","gameOver","gameState","goBoard","document","getElementById","context","getContext","i","moveTo","lineTo","stroke","this","rect","goBoardX","offsetLeft","goBoardY","offsetTop","addEventListener","isPlayerOne","length","sortStone","isBlackStone","push","sort","a","b","x","valueX","valueY","y","cntA","cntB","cntC","j","setState","cnt","event","pageX","pageY","placed","console","log","beginPath","arc","Math","PI","fillStyle","fill","gameScore","className","id","width","height","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.a98a5b0f.chunk.js","sourcesContent":["import React from 'react';\n\nclass Game extends React.Component {\n  \n  constructor(props) {\n    super(props);\n\n    // stone info: radius, diameter\n    this.stoneRadius = 25;\n    this.stoneDiameter = this.stoneRadius * 2;\n\n    // functions\n    this.init = this.init.bind(this);\n    this.addGo = this.addGo.bind(this);\n    \n    // game state\n    this.history = [];\n    this.state = {\n      blackStone: true,\n      gameOver: false,\n      gameState: 'Next: Black Stone *'\n    };\n  }\n\n  componentDidMount() {\n    var goBoard = document.getElementById('goBoard');\n    var context = goBoard.getContext('2d');\n    \n    // draw multiple lines for go board\n    for (let i = 0; i < 15; i++) {\n      context.moveTo(0, 50 * i);\n      context.lineTo(700, 50 * i);\n      context.moveTo(50 * i, 0);\n      context.lineTo(50 * i, 700);\n    }\n    context.stroke();\n\n    // for mouse coordinate\n    this.rect = {};\n    this.goBoardX = goBoard.offsetLeft;\n    this.goBoardY = goBoard.offsetTop;\n\n    this.init();\n  }\n\n  init() {\n    var goBoard = document.getElementById('goBoard');\n    //when clicking the board, a stone will be added to the board\n    goBoard.addEventListener('mousedown', this.addGo, false);\n  }\n\n  gameScore(isPlayerOne) {\n    // draw\n    if (this.history.length === 13 * 13) {\n      this.setState({\n        gameOver: true,\n        gameState: 'Draw!'\n      })\n      return;\n    }\n    // sort history by stone's color\n    this.sortStone = [];\n    if (this.history.length >= 5){\n      for (let i = 0; i < this.history.length; i++) {\n        if (this.history[i].isBlackStone === isPlayerOne) {\n          this.sortStone.push(this.history[i]);\n        }\n      }\n      \n      // sort history by x\n      this.sortStone.sort((a, b) => {\n        if (a.x > b.x) return 1;\n        if (a.x < b.x) return -1;\n        return 0;\n      });\n      \n      // decide who is a winner\n      for (let i = 0; i < this.sortStone.length; i++) {   \n        let valueX = this.sortStone[i].x;\n        let valueY = this.sortStone[i].y;\n        let cntA = 1;\n        let cntB = 1;\n        let cntC = 1;\n        for (let j = i + 1; j < this.sortStone.length; j++) {\n          if (this.sortStone[j].y === valueY + this.stoneDiameter * cntA\n            && this.sortStone[j].x === valueX + this.stoneDiameter * cntA) {\n            // x, y increase\n            cntA += 1\n              \n          } else if (this.sortStone[j].y === valueY - this.stoneDiameter * cntB\n            && this.sortStone[j].x === valueX + this.stoneDiameter * cntB) {\n            // x increases, y decreases\n            cntB += 1;\n\n          } else if (this.sortStone[j].y === valueY \n            && this.sortStone[j].x === valueX + this.stoneDiameter * cntC) {\n            // x increases, y does not change\n            cntC += 1;\n          }\n\n          if (cntA === 5 || cntB === 5 || cntC === 5) {\n            if (isPlayerOne === true) {\n              this.setState({\n                gameOver: true,\n                gameState: \"Black Stone Win!\"\n              })\n            } else {\n              this.setState({\n                gameOver: true,\n                gameState: \"White Stone Win!\"\n              })\n            }\n          }\n        }\n      }\n\n      if (this.state.gameOver === false) {\n        // sort history by y\n        this.sortStone.sort((a, b) => {\n          if (a.y > b.y) return 1;\n          if (a.y < b.y) return -1;\n          return 0;\n        });\n\n        for (let i = 0; i < this.sortStone.length; i++) {   \n          let valueX = this.sortStone[i].x;\n          let valueY = this.sortStone[i].y;\n          let cnt = 1;\n          for (let j = i + 1; j < this.sortStone.length; j++) {\n            if (this.sortStone[j].x === valueX) {\n              // x does not change\n              if (this.sortStone[j].y === valueY + this.stoneDiameter * cnt) {\n                // y increases\n                cnt += 1;\n                if (cnt === 5) {\n                  if (isPlayerOne === true) {\n                    this.setState({\n                      gameOver: true,\n                      gameState: \"Black Stone Win!\"\n                    });\n                  } else {\n                    this.setState({\n                      gameOver: true,\n                      gameState: \"White Stone Win!\"\n                    });\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  addGo(event){\n    // calculating exact mouse coordinates\n    this.rect.x = event.pageX - this.goBoardX - 1;\n    this.rect.y = event.pageY - this.goBoardY - 2;\n    \n    // calculating coordinates to put stones onto the proper places\n    if (this.rect.x % this.stoneDiameter > this.stoneRadius) {\n      this.rect.x = (this.rect.x - this.rect.x % this.stoneDiameter) + this.stoneDiameter;\n    } else {\n      this.rect.x -= this.rect.x % this.stoneDiameter;\n    }\n\n    if (this.rect.y % this.stoneDiameter > this.stoneRadius) {\n      this.rect.y = (this.rect.y - this.rect.y % this.stoneDiameter) + this.stoneDiameter;\n    } else {\n      this.rect.y -= this.rect.y % this.stoneDiameter;\n    }\n\n    // put stones only if they are not on the edges\n    if (this.state.gameOver === false) {\n      if (this.rect.x > 0 && this.rect.x < 700\n        && this.rect.y > 0 && this.rect.y < 700) {\n        \n        // not to put stones at the place where the stone is already placed\n        this.placed = false;      \n  \n        for (let i = 0; i < this.history.length; i++) {\n          if (this.history[i].x === this.rect.x && this.history[i].y === this.rect.y){\n            this.placed = true;\n          }\n        }\n  \n        if (this.placed === true) {\n          // the user clicked where the other stone is already placed\n          console.log(\"don't overwrite\");\n  \n        } else {\n          var goBoard = document.getElementById('goBoard');\n          var context = goBoard.getContext('2d');\n          // record game history\n          this.history.push({x: this.rect.x, y: this.rect.y, isBlackStone: this.state.blackStone});\n  \n          // draw stones based on thier calculated coordinates\n          context.beginPath();\n          context.arc(this.rect.x, this.rect.y, this.stoneRadius, 0, 2 * Math.PI);\n\n          // fill the color of stone:  black or white\n          if (this.state.blackStone === true) {\n            context.fillStyle = \"black\";\n            context.fill();\n            context.stroke();\n            this.setState({\n              blackStone: false,\n              gameState: 'Next: ' + (this.state.blackStone ? 'White Stone' : 'Black Stone *')\n            });\n          } else {\n            context.fillStyle = \"white\";\n            context.fill();\n            context.stroke();\n            this.setState({\n              blackStone: true,\n              gameState: 'Next: ' + (this.state.blackStone ? 'White Stone' : 'Black Stone *')\n            });\n          }\n\n          this.gameScore(true); // Player One (Black Stone) Score\n          if (this.state.gameOver === false) {\n            this.gameScore(false); // Player Two (White Stone) Score\n          }\n        }\n      } \n    }\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <div className=\"status-txt\">\n              {this.state.gameState}\n          </div>\n          <canvas id=\"goBoard\" width=\"700\" height=\"700\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport './index.css';\n  \nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);"],"sourceRoot":""}